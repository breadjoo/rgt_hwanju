name: Deploy React to Amazon EC2

on:
  push:
    branches: [ "main" ]
    paths:
      - 'client/**'
      - '.github/workflows/deploy-frontend.yml'

jobs:
  deploy:
    name: Build, Debug, Deploy React
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create .env.production
        run: |
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env.production
          echo " .env.production created:"
          cat .env.production

      - name: Build React App
        run: |
          export CI=false
          npm install
          npx cross-env REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} npm run build

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_REPO_FE }}:latest
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}


      - name: Debug Docker Image Files
        run: |
          sudo docker create --name temp-container ${{ secrets.DOCKER_REPO_FE }}:latest
          sudo docker cp temp-container:/usr/share/nginx/html /tmp/html
          echo " Checking inside Docker image..."
          grep -r "${{ secrets.REACT_APP_API_URL }}" /tmp/html || echo "❌ API URL not injected in Docker container"
          sudo docker rm temp-container

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            echo " 기존 컨테이너 중지 및 삭제"
            sudo docker ps -qa | xargs -r sudo docker rm -f
            
            echo " 최신 Docker 이미지 가져오기"
            sudo docker pull ${{ secrets.DOCKER_REPO_FE }}:latest

            echo " 새로운 컨테이너 실행"
            sudo docker compose up -d

